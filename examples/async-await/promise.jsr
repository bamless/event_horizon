var State = Enum(
    "PENDING",
    "FULFILLED",
    "REJECTED"
)

class Promise
    construct(fn)
        this._state = State.PENDING
        this._value = null
        this._handlers = []
        this._doResolve(fn)
    end

    fun fulfill(result)
        this._state = State.FULFILLED
        this._value = result
        for var handler in this._handlers
            this._handle(handler)
        end
        this._handlers = null
    end

    fun reject(exception)
        this._state = State.REJECTED
        this._value = exception
        for var handler in this._handlers
            this._handle(handler)
        end
        this._handlers = null
    end

    fun resolve(result=null) 
        try
            if result is Promise
                this._doResolve(result.then)
            else
                this.fulfill(result)
            end
        except Exception e
            this.reject(e)
        end
    end

    fun done(onFulfilled, onRejected)
        this._handle((onFulfilled, onRejected))
    end

    fun then(onFulfilled, onRejected=null)
        var outer = this
        return Promise(fun(resolve, reject)
            return outer.done(fun(result)
                if onFulfilled is Function
                    try
                        return resolve(onFulfilled(result))
                    except Exception e
                        return reject(e)
                    end
                else
                    return resolve(result)
                end
            end, fun(exc)
                if onRejected is Function
                    try
                        return reject(onRejected(exc))
                    except Exception e
                        return reject(e)
                    end
                else
                    return reject(exc)
                end
            end)
        end)
    end

    fun catch(onRejected)
        return this.then(null, onRejected)
    end

    fun _doResolve(fn)
        var outer = this
        var done = false
        try
            fn(fun(value=null)
                if done return end
                done = true
                outer.resolve(value)
            end, fun(exc)
                if done return end
                done = true
                outer.reject(exc)
            end)
        except Exception e
            if done return end
            done = true
            outer.reject(e)
        end
    end

    fun _handle(handler)
        if this._state == State.PENDING
            this._handlers.add(handler)
        else
            var onFulfilled, onRejected = handler
            if this._state == State.FULFILLED and onFulfilled is Function
                onFulfilled(this._value)
            end
            if this._state == State.REJECTED and onRejected is Function
                onRejected(this._value)
            end
        end
    end
end

fun asResolved(val)
    if val is Promise
        return val
    end
    return Promise(fun(resolve, _)
        resolve(val)
    end)
end

fun asRejected(val)
    if val is Promise
        return val
    end
    return Promise(fun(_, reject)
        reject(val)
    end)
end
