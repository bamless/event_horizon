static var STARTING_SZ = 8

class Deque
    construct()
        this._buffer = null
        this._start = 0
        this._end = 0
        this._size = 0
        this._capacityMask = 0
    end

    fun pushBack(elem)
        var idx = (this._end + 1) & this._capacityMask
        if idx == this._start  
            this._grow()
            idx = this._end + 1
        end
        
        this._buffer[idx] = elem
        this._size += 1
    end

    fun popBack()
        if this._size == 0
            raise IndexOutOfBoundException("No elements to pop from the back")
        end
        this._end = (this._end - 1) & this._capacityMask
        this._size -= 1
    end
    
    fun pushFront(elem)
        if !this._buffer or this._size == #this._buffer
            this._grow()
        end
        var idx = (this._start - 1) & this._capacityMask
        this._start = idx
        this._buffer[idx] = elem
        this._size += 1
    end

    fun popFront()
        if this._size == 0
            raise IndexOutOfBoundException("No elements to pop from the front")
        end

        var elem = this._buffer[this._start]

        this._start = (this._start + 1) & this._capacityMask
        this._size -= 1

        return elem
    end

    fun __len__()
        return this._size
    end

    fun __string__()
        return "Dequeue({0}, {1}, {2})" % (this._start, this._end, this._buffer)
    end

    fun _grow()
        var oldBuffer = this._buffer
        this._buffer = List((#oldBuffer * 2) if oldBuffer else STARTING_SZ)

        var newIdx = 0
        if oldBuffer
            for var i = this._start; i != this._end; i = (i + 1) & this._capacityMask
                this._buffer[newIdx] = oldBuffer[i]
                newIdx += 1
            end
        end

        this._start, this._end = 0, newIdx
        this._capacityMask = #this._buffer - 1
    end
end
