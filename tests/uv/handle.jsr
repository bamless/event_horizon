#!/usr/bin/env jstar
importPaths.insert(0, './')
importPaths.insert(0, './tests')

import test for test, run, skip

import server_utils for spawnTCPServer

import event_horizon.errors for EventHorizonException, LoopExecutionException, StatusException
import event_horizon.uv as uv
import event_horizon.uv.event_loop for EventLoop
import event_horizon.uv.tcp for TCP

fun numHandles(loop=null)
    loop = loop or uv.loop()
    return #loop._handles
end

@test
fun close()
    var closed = false

    var tcp = TCP()
    assert(numHandles(), "Handle was not registered in the registry")

    tcp.close(fun()
        closed = true
        assert(#tcp._callbacks == 0, "close callback not unregistred")
    end)
    
    assert(!closed, "`close` called before next loop tick")
    uv.loop().run()
    assert(closed, "`close` callback not called")

    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun alreadyClosing()
    var closed = false

    var tcp = TCP()
    assert(numHandles(), "Handle was not registered in the registry")

    tcp.close(fun()
        closed = true
        tcp.close()    
    end)


    assert(!closed, "`close` called before next loop tick")

    var didThrow = false
    try
        uv.loop().run()
    except LoopExecutionException e
        didThrow = true
        assert(e.cause() is EventHorizonException)
        assert(e.cause().err() == "Handle is already closed")
    end
    
    assert(didThrow, "second `close` did not throw")
    assert(closed, "`close` callback not called")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun closeFail()
    var tcp = TCP()
    assert(numHandles(), "Handle was not registered in the registry")

    tcp.close()
    
    var didThrow = false
    try
        tcp.close()
    except EventHorizonException e
        didThrow = true
    end

    uv.loop().run()

    assert(didThrow, "Close should throw on subsequent calls")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun closeThrows()
    var tcp = TCP()

    assert(numHandles(), "Handle was not registered in the registry")

    tcp.close(fun() raise Exception() end)
    
    var didThrow = false
    try
        uv.loop().run()
    except LoopExecutionException e
        didThrow = true
        assert(e.cause() is Exception, "Chained exception is of wrong type: {0}" % type(e.cause()))
    end

    assert(didThrow, "`uv.loop().run()` Did not propagate the exception")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun closeMultipleThrows()
    var tcp1 = TCP()

    assert(numHandles(), "Handle was not registered in the registry")

    tcp1.close(fun() raise InvalidArgException() end)

    var tcp2 = TCP()
    tcp2.close(fun() raise TypeException() end)
    
    var didThrow = false
    try
        uv.loop().run()
    except LoopExecutionException e
        didThrow = true
        var exceptions = e.exceptions()
        assert(#exceptions == 2, "Too many exceptions: {0}" % #exceptions)
        assert(exceptions.find(|e| => e is InvalidArgException), "Expected to find a `NameException`")
        assert(exceptions.find(|e| => e is TypeException), "Expected to find a `TypeException`")
    end

    assert(didThrow, "`uv.loop().run()` Did not propagate the exception")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun doubleClose()
    var tcp = TCP()
    assert(numHandles(), "Handle was not registered in the registry")
    
    var closed = false
    tcp.connect('0.0.0.0', 8080, fun(status)
        tcp.close(|| => closed = true)
        var didThrow = false
        try
            tcp.close(|| => closed = true)
        except EventHorizonException e
            didThrow = true
        end
        assert(didThrow, "second close didn't throw")
    end)
    
    assert(!closed, "`close` called before next loop tick")
    uv.loop().run()
    assert(closed, "`close` callback not called")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun twoClose()
    var tcp1 = TCP()
    assert(numHandles(), "Handle was not registered in the registry")
    
    var closed1 = false
    tcp1.connect('0.0.0.0', 8080, fun(status)
        tcp1.close(|| => closed1 = true)
    end)

    var tcp2 = TCP()
    assert(numHandles(), "Handle was not registered in the registry")

    var closed2 = false
    tcp2.connect('0.0.0.0', 8080, fun(status)
        tcp2.close(|| => closed2 = true)
    end)
    
    assert(!closed1 and !closed2, "`close` called before next loop tick")
    uv.loop().run()
    assert(closed1 and closed2, "`close` callback not called")
    assert(numHandles(), "Handle was not unregistred from the registry")
end

@test
fun customLoop()
    var closed = false

    var loop = EventLoop() 
    var tcp = TCP(loop)

    tcp.close(|| => closed = true)

    assert(!closed, "`close` called before next loop tick")
    loop.run()
    assert(closed, "`close` callback not called")
    assert(numHandles(loop), "Handle was not unregistred from the registry")
end

@test
fun isActive()
    // TODO: should probabily be tested with a non-I/O handle
    var tcp = TCP()
    assert(!tcp.isActive())
    tcp.close()
    uv.loop().run()
end

@test
fun isClosing()
    var tcp = TCP()
    
    tcp.connect('0.0.0.0', 8080, fun(status)
        assert(!tcp.isClosing(), "isClosing() returned true")
        tcp.close()
        assert(tcp.isClosing(), "isClosing() returned false")
    end)
    
    uv.loop().run()
end

@test
fun size()
    var server = spawnTCPServer(8080)
    var s = TCP()

    s.connect('127.0.0.1', 8080, fun(status)
        if status < 0
            s.close()
            raise StatusException(status)
        end

        var snd = s.sendBufferSize()
        assert(snd is Number and snd > 0, "Wrong send buffer size: {0}" % snd)
        var rcv = s.recvBufferSize()
        assert(rcv is Number and rcv > 0, "Wrong recv buffer size: {0}" % rcv)

        s.setSendBufferSize(5000)
        assert(s.sendBufferSize() == 10000, "Wrong send buffer size")

        s.setRecvBufferSize(5000)
        assert(s.recvBufferSize() == 10000, "Wrong recv buffer size")

        s.close()
    end)

    uv.loop().run()

    server.close()
end

@test
fun fileno()
    var s = TCP()
    s.bind("0.0.0.0", 8080)
    var fd = s.fileno()
    assert(fd is Number)
    s.close()
    uv.loop().run()
end

if __name__ == '__main__'
    run()
end
