#!/usr/bin/env jstar
importPaths.insert(0, './')
importPaths.insert(0, './tests')

import test for test, run, skip

import event_horizon as evh
import event_horizon.async for async
import event_horizon.errors for EventHorizonException
import event_horizon.promise for Promise, all
import event_horizon.pipe for PipeStream
import event_horizon.timers for wait

@test
fun listenConnect()
    var clientConnect, serverConnect = false, false

    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            serverConnect = true
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")
        clientConnect = true
        yield client.close()
    end

    evh.run(all([server(), client()]))

    assert(clientConnect and serverConnect)
end

@test
fun listenOnError()
    var onErrorCalled = false

    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.close()
            yield server.close()
            print(doesNotExist)
        end), fun(exc)
            onErrorCalled = true
            assert(exc is NameException)
        end)
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")
        yield client.close()
    end
    
    assert(!onErrorCalled)

    evh.run(all([server(), client()]))

    assert(onErrorCalled)
end

@test
fun listenClose()
    var closed = false

    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.close()
            yield server.close()
        end))

        closed = true
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")
        yield client.close()
    end

    assert(!closed)

    evh.run(all([server(), client()]))

    assert(closed)
end

@test
fun writeRead()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            try
                var data = yield client.read()
                yield client.write(data)
            ensure
                yield client.close()
                yield server.close()
            end
        end))
    end

    var data

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")
        yield client.write("Hello, World!")
        data = yield client.read()
        yield client.close()
    end

    evh.run(all([server(), client()]))

    assert(data == "Hello, World!")
end

@test
fun writeReadCount()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write("0123456789")
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var data1 = yield client.read(5)
        assert(data1 == "01234")

        var data2 = yield client.read(1)
        assert(data2 == "5")

        var data3 = yield client.read(4)
        assert(data3 == "6789")

        var data4 = yield client.read(500)
        assert(!data4)

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun writeReadCountDelayed()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write("01234")
            yield wait(1000)
            yield client.write("56789")

            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var data1 = yield client.read(8)
        assert(data1 == "01234567")

        var data2 = yield client.read()
        assert(data2 == "89")

        var data3 = yield client.read()
        assert(!data3)

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun writeReadUntil()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write(
                "GET /test HTTP/1.1\r\nHost: test.com\r\n\r\nGET /test2 HTTP/1.1\r\nHost: test.com\r\n\r\n"
            )
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var data1 = yield client.readUntil("\r\n\r\n")
        assert(data1 == "GET /test HTTP/1.1\r\nHost: test.com\r\n\r\n")

        var data2 = yield client.readUntil("\r\n\r\n")
        assert(data2 == "GET /test2 HTTP/1.1\r\nHost: test.com\r\n\r\n")

        var data3 = yield client.read(500)
        assert(!data3)

        var data4 = yield client.readUntil("\r\n\r\n")
        assert(!data4)

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun writeReadUntilDelayed()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write(
                "GET /test HTTP/1.1\r\nHost: test.com\r\n\r\nGET /test2 HTTP/1.1\r\nHos"
            )
            yield wait(1000)
            yield client.write("t: test.com\r\n\r\n")
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var data1 = yield client.readUntil("\r\n\r\n")
        assert(data1 == "GET /test HTTP/1.1\r\nHost: test.com\r\n\r\n")

        var data2 = yield client.readUntil("\r\n\r\n")
        assert(data2 == "GET /test2 HTTP/1.1\r\nHost: test.com\r\n\r\n")

        var data3 = yield client.read(500)
        assert(!data3)

        var data4 = yield client.readUntil("\r\n\r\n")
        assert(!data4)

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun writeln()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write(yield client.readLine())
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")
        yield client.writeln("Hello, World!")
        var data = yield client.readLine()
        assert(data == "Hello, World!\n")
        yield client.close()
    end

    evh.run(all([server(), client()]))
end
fun writeln()
    @async
    fun server()
        var server = TCPStream()
        server.bind("0.0.0.0", 8080)
        
        yield server.listen(async(fun(client)
            yield client.write(yield client.readLine())
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = TCPStream()
        yield client.connect("127.0.0.1", 8080)
        yield client.writeln("Hello, World!")
        var data = yield client.readLine()
        assert(data == "Hello, World!\n")
        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun readLine()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write("line1\nline")
            yield client.write("2\nline3\n")
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var data1 = yield client.readLine()
        assert(data1 == "line1\n")

        var data2 = yield client.readLine()
        assert(data2 == "line2\n")

        var data3 = yield client.readLine()
        assert(data3 == "line3\n")

        var data4 = yield client.read()
        assert(!data4)

        var data5 = yield client.readLine()
        assert(!data5)

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

@test
fun readUntilFail()
    @async
    fun server()
        var server = PipeStream()
        server.bind("test_pipe")
        
        yield server.listen(async(fun(client)
            yield client.write("line1")
            yield client.close()
            yield server.close()
        end))
    end

    @async
    fun client()
        var client = PipeStream()
        yield client.connect("test_pipe")

        var partial = yield client.readLine()
        assert(!partial.endsWith("\n"))

        assert(#client._buffer == 0)

        yield client.close()
    end

    evh.run(all([server(), client()]))
end

if __name__ == '__main__'
    run()
end
