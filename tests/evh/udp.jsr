#!/usr/bin/env jstar
importPaths.insert(0, './')
importPaths.insert(0, './tests')

import test for test, run, skip

import event_horizon as evh
import event_horizon.async for async
import event_horizon.errors for StatusException, EventHorizonException
import event_horizon.promise for Promise, all
import event_horizon.udp for UDPSocket

@test
fun bindSendRecv()
    var dataReceived = false

    @async
    fun server()
        var udp = UDPSocket()
        udp.bind("0.0.0.0", 8080)
        var data, addr, _ = yield udp.recv()
        dataReceived = true
        assert(data == "Hello, World!")
        assert(addr == "127.0.0.1")
        yield udp.close()
    end

    @async
    fun client()
        var udp = UDPSocket()
        yield udp.send("Hello, World!", "127.0.0.1", 8080)
        yield udp.close()
    end

    evh.run(all([server(), client()]))

    assert(dataReceived)
end

@test
fun sendResolveURL()
    var sent = false

    @async
    fun client()
        var udp = UDPSocket()
        yield udp.send("Hello, World!", "example.com", 8080)
        sent = true
        yield udp.close()
    end

    assert(!sent)
    evh.run(client())
    assert(sent)
end

@test
fun sendResolveURLFail()
    var didThrow = false

    @async
    fun client()
        var udp = UDPSocket()
        try
            yield udp.send("Hello, World!", "thiurldoesnotexist-4efe1693-6196-4a4a-83ff-7308f056c221.it", 8080)
        except StatusException e
            didThrow = true
            assert(e.err() == "unknown node or service")
        end
        yield udp.close()
    end
    
    assert(!didThrow)
    evh.run(client())
    assert(didThrow)
end

@test
fun connect()
    var dataReceived = false

    @async
    fun server()
        var udp = UDPSocket()
        udp.bind("0.0.0.0", 8080)
        var data, addr, _ = yield udp.recv()
        dataReceived = true
        assert(data == "Hello, World!")
        assert(addr == "127.0.0.1")
        yield udp.close()
    end

    @async
    fun client()
        var udp = UDPSocket()
        udp.connect("127.0.0.1", 8080)
        yield udp.send("Hello, World!")
        yield udp.close()
    end

    evh.run(all([server(), client()]))

    assert(dataReceived)
end

@test
fun connectFail()
    var didThrow = false

    @async
    fun client()
        var udp = UDPSocket()
        try
            yield udp.send("Hello, World!")
        except StatusException e
            didThrow = true
            assert(e.err() == "destination address required")
        end
        yield udp.close()
    end

    evh.run(client())

    assert(didThrow)
end

@test
fun echo()
    var serverRecv, clientRecv = false, false

    @async
    fun server()
        var udp = UDPSocket()
        udp.bind("0.0.0.0", 8080)

        var data, addr, port = yield udp.recv()
        serverRecv = true

        assert(data == "Hello, World!")
        assert(addr == "127.0.0.1")

        yield udp.send(data, addr, port)
        yield udp.close()
    end

    @async
    fun client()
        var udp = UDPSocket()
        yield udp.send("Hello, World!", "127.0.0.1", 8080)
    
        var data, addr, port = yield udp.recv()
        clientRecv = true

        assert(data == "Hello, World!")
        assert(addr == "127.0.0.1")
        assert(port == 8080)

        yield udp.close()
    end

    evh.run(all([server(), client()]))

    assert(serverRecv and clientRecv)
end

if __name__ == "__main__"
    run()
end
