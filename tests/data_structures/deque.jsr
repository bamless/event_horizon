#!/usr/bin/env jstar
importPaths.insert(0, './')
importPaths.insert(0, './tests')

import event_horizon.data_structures.deque for Deque

import test for test, run, skip

@test
fun pushPopFront()
    var d = Deque()

    d.pushFront("foo")
    assert(#d == 1)
    var elem1 = d.popFront()

    assert(elem1 == "foo")
    assert(#d == 0)

    d.pushFront("bar")
    assert(#d == 1)
    var elem2 = d.popFront()

    assert(elem2 == "bar")
    assert(#d == 0)
end

@test
fun multiplePushPopFront()
    var d = Deque()
    d.pushFront("foo1")
    d.pushFront("foo2")
    d.pushFront("foo3")
    assert(#d == 3)

    assert(d.popFront() == "foo3")
    assert(d.popFront() == "foo2")
    assert(d.popFront() == "foo1")
    assert(#d == 0)

    d.pushFront("bar")
    d.pushFront("bar")
    assert(#d == 2)

    assert(d.popFront() == "bar")

    d.pushFront("bar")
    d.pushFront("bar")
    d.pushFront("bar")
    d.pushFront("bar")

    assert(#d == 5)
end

@test
fun popFrontThrows()
    var d = Deque()
    var didThrow = false
    try
        d.popFront()
    except IndexOutOfBoundException e
        didThrow = true
    end
    assert(didThrow)
end

@test
fun pushPopBack()
    var d = Deque()

    d.pushBack("foo")
    assert(#d == 1)
    var elem1 = d.popBack()

    assert(elem1 == "foo")
    assert(#d == 0)

    d.pushBack("bar")
    assert(#d == 1)
    var elem2 = d.popBack()

    assert(elem2 == "bar")
    assert(#d == 0)
end

@test
fun multiplePushPopBack()
    var d = Deque()
    d.pushBack("foo1")
    d.pushBack("foo2")
    d.pushBack("foo3")
    assert(#d == 3)

    assert(d.popBack() == "foo3")
    assert(d.popBack() == "foo2")
    assert(d.popBack() == "foo1")
    assert(#d == 0)

    d.pushBack("bar")
    d.pushBack("bar")
    assert(#d == 2)

    assert(d.popBack() == "bar")

    d.pushBack("bar")
    d.pushBack("bar")
    d.pushBack("bar")
    d.pushBack("bar")

    assert(#d == 5)
end

@test
fun interleavedBackFront()
    var d = Deque()

    d.pushBack("foo1")
    d.pushBack("foo2")
    d.pushBack("foo3")

    assert(d.popFront() == "foo1")
    assert(#d == 2)

    d.pushFront("foo1")
    d.pushFront("foo4")
    assert(#d == 4)

    assert(d.popFront() == "foo4")
    assert(d.popBack() == "foo3")
    assert(#d == 2)

    d.pushFront("bar1") 
    d.pushFront("bar2") 
    d.pushFront("bar3") 
    d.pushFront("bar4") 

    assert(d.popBack() == "foo2")
    assert(d.popBack() == "foo1")
    assert(d.popBack() == "bar1")
    assert(d.popBack() == "bar2")
    assert(d.popBack() == "bar3")
    assert(d.popBack() == "bar4")

    assert(#d == 0)
end

@test
fun iteration()
    var d = Deque()

    d.pushBack("foo1")
    d.pushFront("foo4")
    d.pushFront("foo5")
    d.pushBack("foo2")
    d.pushBack("foo3")
    d.pushFront("bar1") 
    d.pushBack("bar2")
    d.pushFront("bar3") 
    var order = ["bar3", "bar1", "foo5", "foo4", "foo1", "foo2", "foo3", "bar2"] 
    
    for var idx, e in iter.enumerate(d)
        assert(order[idx] == e)
    end
end

@test
fun iterMethods()
    var d = Deque()

    d.pushBack("foo1")
    d.pushFront("foo4")
    d.pushFront("foo5")
    d.pushBack("foo2")
    d.pushBack("foo3")
    d.pushFront("bar1") 
    d.pushBack("bar2")
    d.pushFront("bar3") 
    var order = ["bar3", "bar1", "foo5", "foo4", "foo1", "foo2", "foo3", "bar2"] 

    assert(d.collect(List) == order)
    assert(d.filter(|e| => !e.startsWith("bar")).collect(List) == order.filter(|e| => !e.startsWith("bar")).collect(List))
    assert(d.take(2).collect(List) == order.take(2).collect(List))
    assert(d.map(|e| => e * 2).collect(List) == order.map(|e| => e * 2).collect(List))
end

if __name__ == '__main__'
    run()
end
