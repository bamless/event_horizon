#!/usr/bin/env jstar
importPaths.insert(0, '../')
import test for test, run, skip

import io

import event_horizon as evh
import event_horizon.errors for strerror, EventHorizonException, LoopExecutionException, StatusException
import event_horizon.udp for UDP

@test
fun bind()
    var udp = UDP()    
    udp.bind('0.0.0.0', 8080)
    udp.close()
    evh.loop().run()
end

@test
fun bindFail()
    var udp = UDP()
    udp.bind('0.0.0.0', 8080)

    var didThrow = true
    try
        udp.bind('0.0.0.0', 8080)
    except StatusException e
        didThrow = true
    end

    assert(didThrow, "second bind did not throw")

    udp.close()
    evh.loop().run()
end

@test
fun connect()
    var udp = UDP()
    udp.connect('127.0.0.1', 8080)
    udp.connect(null)
    udp.close()
    evh.loop().run()
end

@test
fun sendRecv()
    var send = "Hello, World"
    var s = UDP()
    var c = UDP()

    s.bind("0.0.0.0", 8080)

    c.send(send, "127.0.0.1", 8080, fun(status)
        if status < 0
            s.close()
            c.close()
            raise StatusException(status)
        end
    end)

    var recvCalled = false
    s.recvStart(fun(data, addr, port, status)
        recvCalled = true

        s.close()
        c.close()

        if status < 0
            raise StatusException(status)
        end

        assert(data == send, "{0} != {1}" % (data, send))
    end)

    evh.loop().run()

    assert(recvCalled, "recv not called")
end

@test
fun trySend()
    var send = "Hello, World"
    var s = UDP()
    var c = UDP()

    s.bind("0.0.0.0", 8080)
    var n = c.trySend(send, "127.0.0.1", 8080)

    var recvCalled = false
    s.recvStart(fun(data, addr, port, status)
        s.close()
        c.close()

        recvCalled = true
        if status < 0
            raise StatusException(status)
        end

        assert(data == send)
    end)

    evh.loop().run()

    assert(recvCalled, "recv not called")
end

@test
fun sendFail()
    var data = "Hello, World!"
    var udp = UDP()

    udp.send(data, "127.0.0.1", 8080, fun(status)
        udp.close()
        if status < 0
            raise StatusException(status)
        end
        udp.send(data, "127.0.0.1", 8080)
    end)
    
    var didThrow = false
    try
        evh.loop().run()
    except LoopExecutionException e
        didThrow = true
        assert(e.cause() is EventHorizonException and e.cause().err() == "Handle is already closed")
    end

    assert(didThrow, "Call to send after close did not throw")
end

@test
fun recvStartFail()
    var c = UDP()
    var udp = UDP()

    udp.bind("0.0.0.0", 8080)

    c.send("foo", "127.0.0.1", 8080, fun(status)
        if status < 0
            s.close()
            c.close()
            raise StatusException(status)
        end
    end)

    udp.recvStart(fun(data, addr, port, status)
        udp.close()
        c.close()
        udp.recvStart(fun(data, addr, port, status) end)
    end)

    var didThrow = false
    try
        evh.loop().run()
    except LoopExecutionException e
        didThrow = true
        assert(e.cause() is EventHorizonException)
        assert(e.cause().err() == 'Handle is already closed')
    end

    assert(didThrow, "second recvStart did not throw")
end

@test
fun recvStop()
    var c = UDP()
    var udp = UDP()

    udp.bind("0.0.0.0", 8080)

    c.send("foo", "127.0.0.1", 8080, fun(status)
        if status < 0
            s.close()
            c.close()
            raise StatusException(status)
        end
    end)

    c.send("bar", "127.0.0.1", 8080, fun(status)
        if status < 0
            s.close()
            c.close()
            raise StatusException(status)
        end
    end)
    
    var recv = 0
    udp.recvStart(fun(data, addr, port, status)
        recv += 1
        assert(data == "foo")
        udp.recvStop()
    end)

    evh.loop().run()

    c.close()
    udp.close()
    evh.loop().run()

    assert(recv == 1, "recv called more than one time")
end

@test
fun sockName()
    var s = UDP()
    s.bind("0.0.0.0", 8080);

    var addr, port = s.sockName()
    assert(addr == "0.0.0.0" and port == 8080)

    s.close()
    evh.loop().run()
end

@test
fun sockNameFail()
    var s = UDP()
    
    var didThrow = false
    try
        var addr = s.sockName()
    except StatusException e
        didThrow = true
        assert(e.err() == "bad file descriptor")
    end

    assert(didThrow, "sockName did not throw")

    s.close()
    evh.loop().run()
end

@test
fun peerName()
    var client = UDP()
    client.connect("127.0.0.1", 8080)

    var addr, port = client.peerName()
    assert(addr == "127.0.0.1" and port == 8080)

    client.close()
    evh.loop().run()
end

@test
fun peerNameFail()
    var udp = UDP()
    var didThrow = false

    try
        udp.peerName()
    except StatusException e
        didThrow = true
    end

    assert(didThrow, "unconnetted socket did not throw on `peerName`")
    
    udp.close()
    evh.loop().run()
end

@test
fun sendQueueSize()
    var u = UDP()
    var sz = u.sendQueueSize()
    assert(sz is Number)
    u.close()
    evh.loop().run()
end

@test
fun sendQueueCount()
    var u = UDP()
    var sz = u.sendQueueCount()
    assert(sz is Number)
    u.close()
    evh.loop().run()
end

if __name__ == '__main__'
    run()
end
