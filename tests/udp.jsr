#!/usr/bin/env jstar
importPaths.insert(0, '../')
import test for test, run, skip

import io

import server_utils for spawnUDPServer

import event_horizon as evh
import event_horizon.errors for strerror, EventHorizonException, LoopExecutionException, StatusException
import event_horizon.udp for UDP

@test
fun bind()
    var udp = UDP()    
    udp.bind('0.0.0.0', 8080)
    udp.close()
    evh.loop().run()
end

@test
fun bindFail()
    var udp = UDP()
    udp.bind('0.0.0.0', 8080)

    var didThrow = true
    try
        udp.bind('0.0.0.0', 8080)
    except StatusException e
        didThrow = true
    end

    assert(didThrow, "second bind did not throw")

    udp.close()
    evh.loop().run()
end

@test
fun connect()
    var udp = UDP()
    udp.connect('127.0.0.1', 8080)
    udp.connect(null)
    udp.close()
    evh.loop().run()
end

@test
fun send()
    var data = "Hello, World!"
    var server = spawnUDPServer(8080)
    var udp = UDP()

    udp.send(data, "127.0.0.1", 8080, fun(status)
        assert(#udp._callbacks == 0)
        udp.close()
        if status < 0
            raise StatusException(status)
        end
    end)

    evh.loop().run()

    assert(#udp._callbacks == 0)

    var res = server.read(13)
    assert(res == data, "'{0}' != '{1}'" % (res, data))

    // TODO: HACK!!! rework this test
    import sys
    sys.exec("kill $(pgrep nc)")

    server.close()
end

@test
fun sendFail()
    var data = "Hello, World!"
    var udp = UDP()

    udp.send(data, "127.0.0.1", 8080, fun(status)
        udp.close()
        if status < 0
            raise StatusException(status)
        end
        udp.send(data, "127.0.0.1", 8080)
    end)
    
    var didThrow = false
    try
        evh.loop().run()
    except LoopExecutionException e
        didThrow = true
        assert(e.cause() is EventHorizonException and e.cause().err() == "Handle is already closed")
    end

    assert(didThrow, "Call to send after close did not throw")
end

if __name__ == '__main__'
    run()
end
