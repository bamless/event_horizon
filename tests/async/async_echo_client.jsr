#!/usr/bin/env jstar

import io

import promise for Promise
import async for async

import event_horizon as evh
import event_horizon.errors for StatusException
import event_horizon.tcp for TCP

// ---- Promisified `TCP` methods ----

fun read(sock)
    return Promise(fun(resolve, reject)
        sock.readStart(fun(data, status)
            sock.readStop()
            if status < 0
                reject(StatusException(status))
            else
                resolve(data)
            end
        end)
    end)
end

fun write(sock, data)
    return Promise(fun(resolve, reject)
        sock.write(data, fun(status)
            if status < 0
                reject(StatusException(status))
            else
                resolve()
            end
        end)
    end)
end

fun connect(sock, addr, port)
    return Promise(fun(resolve, reject)
        sock.connect(addr, port, fun(status)
            if status < 0
                reject(StatusException(status))
            else
                resolve()
            end
        end)
    end)
end

fun close(sock)
    return Promise(fun(resolve, _)
        sock.close(fun()
            resolve()
        end)
    end)
end

// ---- Echo Client ----

@async
fun sendLoop()
    with TCP() sock
        yield connect(sock, '127.0.0.1', 8080)

        var line
        while (line = io.stdin.readLine())
            yield write(sock, line.strip())
            print(yield read(sock))
        end
    end
end

@async
fun main()
    try
        yield sendLoop()
    except Exception e
        e.printStacktrace()
    end
end

main()
evh.loop().run()
