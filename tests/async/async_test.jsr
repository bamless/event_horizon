#!/usr/bin/env jstar
import io

import promise for Promise
import async for async
import async_tcp for read, write, connect, close

import event_horizon as evh
import event_horizon.errors for strerror, StatusException
import event_horizon.tcp for TCP

@async
fun client()
    var sock = TCP()
    try
        yield connect(sock, '127.0.0.1', 8080)
        var data = yield read(sock)
        print(data)
    except Exception e
        e.printStacktrace()
    ensure
        close(sock)
    end
end

fun promiseClient()
    var sock = TCP()
    connect(sock, '127.0.0.1', 8080).then(fun(val)
        return read(sock)
    end).then(fun(val)
        print(val)
        close(sock)
    end).catch(fun(exc)
        exc.printStacktrace()
        close(sock)
    end)
end

fun server(connectCallback)
    var server = TCP()
    server.bind('0.0.0.0', 8080)
    server.listen(fun(client, status)
        if status < 0
            io.stderr.println(strerror(status))
        else
            connectCallback(client, server)
        end
    end)
end

@async
fun handleClient(client, server)
    try
        yield write(client, "Hello, Async!")
    except Exception e
        e.printStacktrace()
    ensure
        yield close(client)
        yield close(server)
    end
end

server(handleClient)
client()

evh.loop().run()
