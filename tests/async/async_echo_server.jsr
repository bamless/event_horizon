#!/usr/bin/env jstar
import io

import promise for Promise
import async for async

import event_horizon as evh
import event_horizon.errors for strerror
import event_horizon.tcp for TCP

// ---- Promisified `TCP` methods ----

fun read(sock)
    return Promise(fun(resolve, reject)
        sock.readStart(fun(data, status)
            sock.readStop()
            if status < 0
                reject(StatusException(status))
            else
                resolve(data)
            end
        end)
    end)
end

fun write(sock, data)
    return Promise(fun(resolve, reject)
        sock.write(data, fun(status)
            if status < 0
                reject(StatusException(status))
            else
                resolve()
            end
        end)
    end)
end

fun close(sock)
    return Promise(fun(resolve, _)
        sock.close(fun()
            resolve()
        end)
    end)
end

// ---- Echo server ----

fun server(connectCallback)
    var server = TCP()
    server.bind('0.0.0.0', 8080)
    server.listen(fun(client, status)
        if status < 0
            io.stderr.println(strerror(status))
        else
            connectCallback(client)
        end
    end)
end

@async
fun handleClient(client)
    try
        var data
        while (data = yield read(client))
            yield write(client, data)
        end
    except Exception e
        e.printStacktrace()
    ensure
        yield close(client)
    end
end

server(handleClient)
evh.loop().run()
