import promise for Promise
import async for async

import event_horizon as evh
import event_horizon.errors for StatusException
import event_horizon.tcp for TCP

fun read(sock)
    return Promise(fun(resolve, reject)
        sock.readStart(fun(data, status)
            sock.readStop()
            if status < 0
                reject(StatusException(status))
            else
                resolve(data)
            end
        end)
    end)
end

fun write(sock, data)
    return Promise(fun(resolve, reject)
        sock.write(data, fun(status)
            if status < 0
                reject(StatusException(status))
            else
                resolve()
            end
        end)
    end)
end

fun connect(sock, addr, port)
    return Promise(fun(resolve, reject)
        sock.connect(addr, port, fun(status)
            if status < 0
                reject(StatusException(status))
            else
                resolve()
            end
        end)
    end)
end

fun close(sock)
    return Promise(fun(resolve, _)
        sock.close(fun()
            resolve(1000)
        end)
    end)
end

@async
fun client()
        var sock = TCP()
        try
            yield connect(sock, '127.0.0.1', 8080)
            print(zz)
            var data = yield read(sock)
            print(data)
        ensure
            print(zz)
            yield close(sock)
        end
end

fun client2()
    var sock = TCP()
    connect(sock, '127.0.0.1', 8080).then(fun(val)
        print(zz)
        return read(sock)
    end).then(fun(val)
        print(val)
        sock.close()
    end).catch(fun(exc)
        exc.printStacktrace()
        sock.close()
    end)
end

@async
fun handleClient(client)
    yield write(client, "Hello, Async!")
end

fun server()
    var server = TCP()
    server.bind('0.0.0.0', 8080)
    server.listen(fun(client, status)
        handleClient(client) 
        server.close()
        client.close()
    end)
end

server()
client()

evh.loop().run()
