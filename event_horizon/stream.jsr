import event_horizon.utils.abc for abstract, abstractMethod
import event_horizon.async for async
import event_horizon.data_structures.deque for Deque
import event_horizon.errors for EventHorizonException, StatusException
import event_horizon.handle for Handle
import event_horizon.promise for Promise

@async
static fun handleConnection(client, status, onConnect)
    if status < 0
        raise StatusException(status)
    end
    return onConnect(client)
end

class Stream is Handle
    @abstract(Stream) construct(handle)
        super(handle)
        this._resolveListen = null
        this._buffer = Deque()
        this._bufferedBytes = 0
    end

    @abstractMethod
    fun _accept(client) end

    fun close()
        if this._resolveListen
            this._resolveListen()
        end
        return super()
    end

    fun listen(onConnect, onError=null, backlog=0) 
        var self = this
        return Promise(fun(resolve, _)
            self._resolveListen = resolve
            self._handle.listen(fun(client, status)
                handleConnection(self._accept(client), status, onConnect).
                    catch(onError or (|e| => e.printStacktrace()))
            end)
        end)
    end

    fun write(data)
        var self = this
        return Promise(fun(resolve, reject)
            self._handle.write(data, fun(status)
                if status < 0
                    reject(StatusException(status))
                else
                    resolve()
                end
            end)
        end)
    end

    fun tryWrite(data)
        return this._handle.tryWrite(data)
    end
    
    fun read(count=0)
        var data = this._drainAll() if count == 0 else this._drainUntil(count)
        if data
            return data
        end

        var self = this
        return Promise(fun(resolve, reject)
            self._handle.readStart(fun(data, status)
                if status < 0
                    self._handle.readStop()
                    reject(StatusException(status))
                    return
                end

                if count == 0
                    self._handle.readStop()
                    resolve(data)
                    return
                end

                if !data  // EOF
                    self._handle.readStop()
                    resolve(self._drainAll())
                    return
                end

                self._buffer.pushBack(data)
                self._bufferedBytes += #data
                var dataChunk = self._drainUntil(count)

                if dataChunk
                    self._handle.readStop()
                    resolve(dataChunk)
                end
            end)
        end)
    end

    fun readUntil(separator)
        var data = this._drainUntilSep(separator)
        if data
            return data
        end

        var self = this
        return Promise(fun(resolve, reject)
            self._handle.readStart(fun(data, status)
                if status < 0
                    self._handle.readStop()
                    reject(StatusException(status))
                    return
                end

                if !data  // EOF
                    self._handle.readStop()
                    resolve(self._drainAll())
                    return
                end

                self._buffer.pushBack(data)
                self._bufferedBytes += #data
                var dataChunk = self._drainUntilSep(separator)

                if dataChunk
                    self._handle.readStop()
                    resolve(dataChunk)
                end
            end)
        end)
    end

    fun readLine()
        return this.readUntil("\n")
    end

    fun shutdown()
        var self = this
        return Promise(fun(resolve, reject)
            self._handle.shutdown(fun(status)
                if status < 0
                    reject(StatusException(status))
                else
                    resolve()
                end
            end)
        end)
    end

    fun isReadable()
        return this._handle.isReadable()
    end

    fun isWritable()
        return this._handle.isWritable()
    end

    fun getWriteQueueSize()
        return this._handle.getWriteQueueSize()
    end

    fun _drainUntil(count)
        var numChunks, chunksSize = 0, 0
        while chunksSize < count
            var chunk = this._buffer.peekFront(numChunks)
            if !chunk
                return null
            end
            chunksSize += #chunk
            numChunks += 1
        end

        var data = this._bufferTakeFront(numChunks)
        if chunksSize > count
            this._buffer.pushFront(data[count, chunksSize])
            data = data[0, count]
        end

        this._bufferedBytes -= count
        return data
    end

    fun _drainUntilSep(separator)
        var sepEnd, chunksSize, numChunks = -1, 0, 0

        var chunk
        while (chunk = this._buffer.peekFront(numChunks)) and sepEnd == -1
            var pos = chunk.findSubstr(separator) 
            if pos != -1
                sepEnd = chunksSize + pos + #separator
            end
            numChunks += 1
            chunksSize += #chunk
        end

        if sepEnd == -1
            return null
        end

        var data = this._bufferTakeFront(numChunks)
        if chunksSize > sepEnd
            this._buffer.pushFront(data[sepEnd, chunksSize])
            data = data[0, sepEnd]
        end

        this._bufferedBytes -= sepEnd
        return data
    end

    fun _drainAll()
        if this._bufferedBytes == 0
            return null
        end
        var data = this._buffer.join()
        this._bufferedBytes = 0
        this._buffer.clear()
        return data
    end

    fun _bufferTakeFront(num)
        var data = this._buffer.take(num).join()
        // clear the consumed buffer chunks
        for var i = 0; i < num; i += 1
            this._buffer.popFront()
        end
        return data
    end
end
