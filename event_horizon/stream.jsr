import event_horizon.utils.abc for abstract, abstractMethod
import event_horizon.async for async
import event_horizon.errors for StatusException
import event_horizon.handle for Handle
import event_horizon.promise for Promise

@async
static fun handleConnection(client, status, onConnect)
    if status < 0
        raise StatusException(status)
    else
        yield onConnect(client)
    end
end

class Stream is Handle
    @abstract(Stream) construct(handle)
        super(handle)
    end

    fun listen(onConnect, onError=null, backlog=0) 
        var self = this
        return Promise(fun(_resolve, _reject)
            self._handle.listen(fun(client, status)
                handleConnection(self._accept(client), status, onConnect).
                    catch(onError or (|e| => e.printStacktrace()))
            end)
        end)
    end

    fun write(data)
        var self = this
        return Promise(fun(resolve, reject)
            self._handle.write(data, fun(status)
                if status < 0
                    reject(StatusException(status))
                else
                    resolve()
                end
            end)
        end)
    end

    fun tryWrite(data)
        return this._handle.tryWrite(data)
    end
    
    // TODO: should give the option to specify how much bytes the user wants to read
    fun read()
        var self = this
        return Promise(fun(resolve, reject)
            self._handle.readStart(fun(data, status)
                self._handle.readStop()

                if status < 0
                    reject(StatusException(status))
                else
                    resolve(data)
                end
            end)
        end)
    end

    fun shutdown()
        var self = this
        return Promise(fun(resolve, reject)
            self._handle.shutdown(fun(status)
                if status < 0
                    reject(StatusException(status))
                else
                    resolve()
                end
            end)
        end)
    end

    @abstractMethod fun _accept(client) end
end
